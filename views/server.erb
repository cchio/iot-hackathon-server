<div id="pie" class="epoch" style="width: 400px; height: 400px"></div>
<div id="area" class="epoch" style="width: 1080px; height: 400px"></div>
<script>
  var DEVICE_ID_FIELD = 'agentId';

  var update_realtime = (function() {
    var device_pref_states = {}
    // closure
    return function(msg) {
      var pref_states = [], ii
      var device_id;
      var entry = [];
      var curr_t = Date.now()/1000;

      device_pref_states[msg[DEVICE_ID_FIELD]] = device_pref_states[msg[DEVICE_ID_FIELD]] || 0;
      device_pref_states[msg[DEVICE_ID_FIELD]] = msg.pref;

      // initialize pref states;
      for (ii = 0; ii < 6; ii++) {
        pref_states[ii] = 0;
      }
      // tally up pref states
      for (device_id in device_pref_states) {
        pref_states[device_pref_states[device_id]] += 1;
      }


      for (ii = 0; ii < 6; ii++) {
        entry.push( { timestamp: curr_t, y: pref_states[ii] } );
      }
      console.log(JSON.stringify(entry));
      EPOCH_OBJECTS.area.push(entry);
    }
  })();

  pubnub.subscribe({
    channel: 'soloChannel',
    message: function(msg) {
      update_realtime(msg);
      pubnub.history({
        channel: 'soloChannel',
        count: 100,
        callback: update_main
      });
    }
  });

  function update_main(pubnub_response) {
    // response looks like [payloads, end_token, start_token]
    // c.f. http://www.pubnub.com/docs/javascript/tutorial/storage-playback.html
    var msgs = pubnub_response[0];
    var latest_prefs = compute_latest_prefs(msgs);
    var pref_counts = group_prefs_by_count(latest_prefs);
    console.log('pref_counts: ' + JSON.stringify(pref_counts));
    console.log('latest_prefs: ' + JSON.stringify(latest_prefs));

    // publish to the channel
    pubnub.publish({
      channel: 'aggrChannel',
      message: pref_counts 
    });

    var pie_data = [];
    var ii;
    for (ii = 0; ii < pref_counts.length; ii++) {
      pie_data.push({ label: "Pref "+ii, value: pref_counts[ii] });  
    }
    console.log('pie_data: ' + JSON.stringify(pie_data));
    EPOCH_OBJECTS.pie.update(pie_data);
  }

  function compute_latest_prefs(msgs) {
    var msg, ii, latest_prefs;
    latest_prefs = {}; 
    // Get the latest prefs per device_id
    for (ii = 0; ii < msgs.length; ii++) {
      msg = msgs[ii];
      latest_prefs[msg[DEVICE_ID_FIELD]] = msg.pref;
    }
    return latest_prefs;
  };

  function group_prefs_by_count(prefs) {
    var ii, device_id, pref, pref_counts = [];
    // initialize
    for (ii = 0; ii < 6; ii++) {
      pref_counts[ii] = 0;
    }

    for (device_id in prefs) {
      pref = prefs[device_id];
      pref_counts[pref] += 1;
    }
    return pref_counts;
  }

    // Tally up the count
    /*var louder_count = 0, quieter_count = 0;
    
    for (device_id in latest_prefs) {
      if (latest_prefs[device_id] > 3) {
        louder_count += 1;
      } else {
        quieter_count += 1;
      }
    }

    return [
      { label: "Louder please!", value: louder_count },
      { label: "Quieter please!", value: quieter_count }
    ];
    */


  // initializing stuff
  var EPOCH_OBJECTS = {
    pie: $("#pie").epoch( { type: "pie", data: [ { label: ":-)", value: 1 } ] } ),
    area: $("#area").epoch( {
      type: "time.area",
      data: [
      // because there are six prefernce values
        { values: [{time:Math.floor(Date.now()/1000), y:0}] },
        { values: [{time:Math.floor(Date.now()/1000), y:0}] },
        { values: [{time:Math.floor(Date.now()/1000), y:0}] },
        { values: [{time:Math.floor(Date.now()/1000), y:0}] },
        { values: [{time:Math.floor(Date.now()/1000), y:0}] },
        { values: [{time:Math.floor(Date.now()/1000), y:0}] }
      ] } )
  };
  pubnub.history({
          channel: 'soloChannel',
          count: 100,
          callback: update_main
        });
</script>
